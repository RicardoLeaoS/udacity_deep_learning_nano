https://www.youtube.com/watch?v=MZL97-2joxQ




















-----------------------------------------

import numpy as np


def sigmoid(x):
    """
    Calculate sigmoid
    """
    return 1 / (1 + np.exp(-x))

def sigmoid_prime(x):
    """
    Calculate sigmoid derivative
    """
    return sigmoid(x) * (1 - sigmoid(x))



# 1D array: 1 x 3
x = np.array([0.5, 0.1, -0.2])
# output: single node
target = 0.6
learnrate = 0.5

# 3 x 2 matrix
weights_input_hidden = np.array([[0.5, -0.6],
                                 [0.1, -0.2],
                                 [0.1, 0.7]])

# 1D array: 1x2
weights_hidden_output = np.array([0.1, -0.3])

## Forward pass
# 1x3 dot 3x2 => 1 x 2 matrix
hidden_layer_input = np.dot(x, weights_input_hidden)
hidden_layer_output = sigmoid(hidden_layer_input)

# 1x2 dot 1 x 2
output_layer_in = np.dot(hidden_layer_output, weights_hidden_output)
output = sigmoid(output_layer_in)


####### nn => 3 input nodes, 2 node hidden, 1 output node


## Backwards pass
## TODO: Calculate output error
error = target - output

# TODO: Calculate error term for output layer
output_error_term = error * sigmoid_prime(output_layer_in)

# TODO: Calculate error term for hidden layer
# erro posterior * gradiente do valor que sai do hidden ponderado pelo peso da conexao
hidden_error_term = output_error_term *  weights_hidden_output * sigmoid_prime(hidden_layer_input)

# TODO: Calculate change in weights for hidden layer to output layer
delta_w_h_o = learnrate * output_error_term *  hidden_layer_output

# TODO: Calculate change in weights for input layer to hidden layer
delta_w_i_h = learnrate * hidden_error_term * x[:, None]

print('Change in weights for hidden layer to output layer:')
print(delta_w_h_o)
print('Change in weights for input layer to hidden layer:')
print(delta_w_i_h)


Change in weights for hidden layer to output layer:
[0.00804047 0.00555918]
Change in weights for input layer to hidden layer:
[[ 1.77005547e-04 -5.11178506e-04]
 [ 3.54011093e-05 -1.02235701e-04]
 [-7.08022187e-05  2.04471402e-04]]

Nice job!  That's right!