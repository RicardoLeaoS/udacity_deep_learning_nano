https://www.youtube.com/watch?v=Rs9petvTBLk

intro to vectors: 
https://www.khanacademy.org/math/linear-algebra/vectors-and-spaces/vectors/v/vector-introduction-linear-algebra

intro to matrices:
https://www.khanacademy.org/math/precalculus-2018/precalc-matrices


import numpy as np

def sigmoid(x):
    """
    Calculate sigmoid
    """
    return 1/(1+np.exp(-x))

# Network size
N_input = 4
N_hidden = 3
N_output = 2

np.random.seed(42)
# Make some fake data
# 1 x 4
X = np.random.randn(4)
#print(X.shape)

# 4 x 3
weights_input_to_hidden = np.random.normal(0, scale=0.1, size=(N_input, N_hidden))
#print(weights_input_to_hidden.shape)
# 3 x 2
weights_hidden_to_output = np.random.normal(0, scale=0.1, size=(N_hidden, N_output))
#print(weights_hidden_to_output.shape)

# TODO: Make a forward pass through the network

# 1 x 4 dot 4 x 3 => 1 x 3
hidden_layer_in = X.dot(weights_input_to_hidden)
#print(hidden_layer_in.shape)

# 1 x 3
hidden_layer_out = sigmoid(hidden_layer_in)
#print(hidden_layer_out.shape)

print('Hidden-layer Output:')
print(hidden_layer_out)

# 1 x 3 dot 3 x 2 => 1 x 2
output_layer_in = hidden_layer_out.dot(weights_hidden_to_output)
output_layer_out = sigmoid(output_layer_in)

print('Output-layer Output:')
print(output_layer_out)